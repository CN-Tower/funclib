(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = new (factory().Funclib)(root);
	else if(typeof define === 'function' && define.amd)
		define([root], function(root) {new (factory().Funclib)(root)});
	else if(typeof exports === 'object')
		exports["fn"] = new (factory().Funclib)(root);
	else
		root["fn"] = new (factory().Funclib)(root);
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(1);
var array_1 = __webpack_require__(2);
var object_1 = __webpack_require__(3);
var time_1 = __webpack_require__(4);
var patterns_1 = __webpack_require__(5);
var events_1 = __webpack_require__(6);
var math_1 = __webpack_require__(8);
var loger_1 = __webpack_require__(9);
var dom_1 = __webpack_require__(10);
var cookie_1 = __webpack_require__(11);
var tools_1 = __webpack_require__(12);
var progress_1 = __webpack_require__(13);
var __extends_1 = __webpack_require__(14);
var funclib_conf_1 = __webpack_require__(15);
var Funclib = /** @class */ (function () {
    function Funclib(root) {
        var _this = this;
        this.version = 'V2.0.1';
        var deleteProp = function (prop) {
            var proto = _this['__proto__'];
            delete _this[prop];
            if (proto) {
                delete proto[prop];
            }
        };
        if (root && root.window && root.document) {
            funclib_conf_1.FunclibConf.isClient = true;
            funclib_conf_1.FunclibConf.serverMethods.forEach(function (prop) { return deleteProp(prop); });
        }
        else {
            funclib_conf_1.FunclibConf.isClient = false;
            funclib_conf_1.FunclibConf.clientMethods.forEach(function (prop) { return deleteProp(prop); });
        }
        var jquery = root && (root.$ || root.jquery);
        if (jquery) {
            __extends_1.extendJquery(jquery, this.interval);
        }
    }
    /**
     * [fn.array] 返回一个指定长度和默认值的数组
     * @param length [number]
     * @param value  [any, function]
     */
    Funclib.prototype.array = function (length, value) {
        return array_1.Arr.array(length, value);
    };
    /**
     * [fn.toArray] 值数组化
     * @param src
     */
    Funclib.prototype.toArray = function (src) {
        return array_1.Arr.toArray(src);
    };
    /**
     * [fn.sortByField] 对象数组根据字段排序
     * @param data
     * @param field
     * @param isDesc
     */
    Funclib.prototype.sortByField = function (data, field, isDesc) {
        return array_1.Arr.sortByField(data, field, isDesc);
    };
    /**
     * [fn.length] 获取对象自有属性的个数
     * @arg obj [object]
     */
    Funclib.prototype.length = function (obj) {
        return object_1.Obj.len(obj);
    };
    /**
     * [fn.isEmpty] 判断对象是否为空对象或数组
     * @param obj
     */
    Funclib.prototype.isEmpty = function (obj) {
        return object_1.Obj.isEmpty(obj);
    };
    /**
     * [fn.overlay] 给对象赋值
     * @param target
     * @param source
     * @param propList
     */
    Funclib.prototype.overlay = function (target, source, propList) {
        return object_1.Obj.overlay(target, source, propList);
    };
    /**
     * [fn.deepCopy] 深拷贝对象或数组
     * @param data
     */
    Funclib.prototype.deepCopy = function (data) {
        return object_1.Obj.deepCopy(data);
    };
    /**
     * [fn.randomId] 返回一个指定长度（最小4位）的随机ID
     * @param len
     */
    Funclib.prototype.randomId = function (len) {
        if (len === void 0) { len = 12; }
        return math_1.Mathematic.randomId.call(this, len);
    };
    /**
     * 返回一个指定范围内的随机数
     * @param sta
     * @param end
     */
    Funclib.prototype.randomNum = function (sta, end) {
        return math_1.Mathematic.randomNum(sta, end);
    };
    /**
     * 返回一个随机颜色色值
     */
    Funclib.prototype.randomColor = function () {
        return math_1.Mathematic.randomColor();
    };
    /**
     * [fn.interval] 循环定时器
     * @param timerId
     * @param duration
     * @param func
     */
    Funclib.prototype.interval = function (timerId, duration, func) {
        return time_1.Time.interval(timerId, duration, func);
    };
    /**
     * [fn.timeout] 延时定时器
     * @param timerId
     * @param duration
     * @param func
     */
    Funclib.prototype.timeout = function (timerId, duration, func) {
        return time_1.Time.timeout(timerId, duration, func);
    };
    /**
     * [fn.timeStamp] 返回一个当前时间戳
     */
    Funclib.prototype.timeStamp = function (date) {
        return time_1.Time.timeStamp(date);
    };
    /**
     * [fn.fmtDate] 获取格式化的时间字符串
     * @param fmtStr
     * @param time
     */
    Funclib.prototype.fmtDate = function (fmtStr, time) {
        return time_1.Time.fmtDate(fmtStr, time);
    };
    /**
     * [fn.encodeHtml] 编码HTML字符串
     * @param html
     */
    Funclib.prototype.encodeHtml = function (html) {
        return string_1.Str.encodeHtml(html);
    };
    /**
     * [fn.decodeHtml] 解码HTML字符串
     * @param html
     */
    Funclib.prototype.decodeHtml = function (html) {
        return string_1.Str.decodeHtml(html);
    };
    /**
     * [fn.currency] 格式化显示货币
     * @param number
     * @param digit
     * @returns {string}
     */
    Funclib.prototype.currency = function (number, digit) {
        if (digit === void 0) { digit = 2; }
        return string_1.Str.currency(number, digit);
    };
    /**
     * [fn.cutString] 裁切字符串到指定长度
     * @param str
     * @param len
     * @returns {string}
     */
    Funclib.prototype.cutString = function (str, len) {
        return string_1.Str.cutString.call(this, str, len);
    };
    /**
     * [fn.getPattern] 与一个或几个通用正则匹配
     * @param type
     * @param isNoLimit
     * @returns {pattern|undefined}
     */
    Funclib.prototype.getPattern = function (type, isNoLimit) {
        if (isNoLimit === void 0) { isNoLimit = false; }
        return patterns_1.Patterns.getPattern(type, isNoLimit);
    };
    /**
     * [fn.matchPattern] 获取一个通用的正则表达式
     * @param src
     * @param type
     * @param isNoLimit
     * @returns {boolean}
     */
    Funclib.prototype.matchPattern = function (src, type, isNoLimit) {
        if (isNoLimit === void 0) { isNoLimit = false; }
        return patterns_1.Patterns.matchPattern(src, type, isNoLimit);
    };
    /**
     * [fn.getKeyCodeByName] 根据键名获取键码
     * @param keyName
     */
    Funclib.prototype.getKeyCodeByName = function (keyName) {
        return events_1.Events.getKeyCodeByName(keyName);
    };
    /**
     * [fn.getKeyCodeByName] 根据键码获取键名
     * @param keyName
     */
    Funclib.prototype.getKeyNameByCode = function (keyCode) {
        return events_1.Events.getKeyNameByCode(keyCode);
    };
    /**
     * [fn.fullScreen] 全屏显示HTML元素
     * @param el
     * @returns {any}
     */
    Funclib.prototype.fullScreen = function (el) {
        return dom_1.Dom.fullScreen(el);
    };
    /**
     * [fn.exitFullScreen] 退出全屏显示
     * @returns {any}
     */
    Funclib.prototype.exitFullScreen = function () {
        return dom_1.Dom.exitFullScreen();
    };
    /**
     * [fn.checkIsFullScreen] 检测是否全屏状态
     * @returns {boolean}
     */
    Funclib.prototype.checkIsFullScreen = function () {
        return dom_1.Dom.checkIsFullScreen();
    };
    /**
     * [fn.setCookie] 设置Cookie
     * @param name
     * @param value
     * @param days
     */
    Funclib.prototype.setCookie = function (name, value, days) {
        return cookie_1.Cookie.setCookie(name, value, days);
    };
    /**
     * [fn.getCookie] 根据name读取cookie
     * @param  name
     * @return {String}
     */
    Funclib.prototype.getCookie = function (name) {
        return cookie_1.Cookie.getCookie(name);
    };
    /**
     * [fn.removeCookie] 根据name删除cookie
     * @param name
     */
    Funclib.prototype.removeCookie = function (name) {
        return cookie_1.Cookie.removeCookie(name);
    };
    /**
     * [fn.log] 控制台格式化打印值
     * @param value
     * @param configs {
     * title: string,
     * lineLen: number [20-100]
     * part: 'pre'|'end' [S]
     * color: 'grey'|'blue'|'cyan'|'green'|'magenta'|'red'|'yellow' [S]
     */
    Funclib.prototype.log = function (value, configs) {
        return loger_1.loger.call(this, value, configs, funclib_conf_1.FunclibConf.isClient);
    };
    /**
     * [fn.initProgress] 初始化进度条工具
     * @param progress
     */
    Funclib.prototype.initProgress = function (progress) {
        var pg = new progress_1.Progress(progress);
        this['progress'] = {};
        /**
         * [fn.progress.start] 开启进度条，并传入参数
         * @param options {title: string, width: number (base: 40)}
         */
        this['progress']['start'] = function (options) { return pg.start(options); };
        /**
         * [fn.progress.stop] 结束进度条，结束后触发回调
         * @param onStopped
         */
        this['progress']['stop'] = function (onStopped) { return pg.stop(onStopped); };
    };
    /**
     * 初始化NodeJs工具
     * @param fs
     * @param path
     * @param child_process
     * @param process
     */
    Funclib.prototype.initTools = function (fs, path, child_process, process) {
        var tools = new tools_1.Tools(fs, path, child_process, process);
        /**
         * [fn.cpSync] 复制文件或文件夹
         * @param file
         * @param dist
         */
        this['cpSync'] = function (filePath, distPath) { return tools.cpSync(filePath, distPath); };
        /**
         * [fn.mvSync] 移动文件或文件夹
         * @param dir
         * @param dist
         */
        this['mvSync'] = function (dir, dist) { return tools.mvSync(dir, dist); };
        /**
         * [fn.rmSync] 删除文件或文件夹
         * @param dir
         */
        this['rmSync'] = function (dir) { return tools.rmSync(dir); };
        /**
         * [fn.mkdirSync] 创建文件夹
         * @param dist
         */
        this['mkdirSync'] = function (dist) { return tools.mkdirSync(dist); };
    };
    return Funclib;
}());
exports.Funclib = Funclib;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Str = /** @class */ (function () {
    function Str() {
    }
    /**
     * [fn.encodeHtml] 编码HTML字符串
     * @param html
     */
    Str.encodeHtml = function (html) {
        var _this = this;
        this.htmlMap.src.forEach(function (src, i) { return html.replace(new RegExp(src, 'g'), _this.htmlMap.map[i]); });
        return html;
    };
    /**
     * [fn.decodeHtml] 解码HTML字符串
     * @param html
     */
    Str.decodeHtml = function (html) {
        var _this = this;
        this.htmlMap.map.forEach(function (map, i) { return html.replace(new RegExp(map, 'g'), _this.htmlMap.src[i]); });
        return html;
    };
    /**
   * [fn.currency] 格式化显示货币
   * @param number
   * @param digit
   * @returns {string}
   */
    Str.currency = function (number, digit) {
        var nbArr = String(number.toFixed(digit)).split('.');
        var integer = nbArr[0];
        var decimal = nbArr.length > 1 ? nbArr[1] : '';
        var integerStr, spn, sti, i;
        spn = Math.floor(integer.length / 3);
        sti = integer.length % 3;
        integerStr = integer.substr(0, sti);
        for (i = 0; i < spn; i++) {
            integerStr += (i === 0 && !integerStr) ? integer.substr(sti, 3) : ',' + integer.substr(sti, 3);
            sti += 3;
        }
        return decimal ? integerStr + '.' + decimal : integerStr;
    };
    /**
     * [fn.cutString] 裁切字符串到指定长度
     * @param str
     * @param len
     * @returns {string}
     */
    Str.cutString = function (str, len) {
        var tmpStr = '';
        var count = 0;
        var tmpChar;
        for (var i = 0; i < str.length; i++) {
            if (count < len) {
                tmpChar = str.substr(i, 1);
                tmpStr += tmpChar;
                count += this.matchPattern(tmpChar, 'cnChar') ? 2 : 1;
            }
            else {
                break;
            }
        }
        return tmpStr + '...';
    };
    Str.htmlMap = {
        src: ['&', '<', '>', ' ', '\'', '"'],
        map: ['&amp;', '&lt;', '&gt;', '&nbsp;', '&#39;', '&quot;']
    };
    return Str;
}());
exports.Str = Str;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Arr = /** @class */ (function () {
    function Arr() {
    }
    /**
     * [fn.array] 返回一个指定长度和默认值的数组
     * @param length [number]
     * @param value  [any, function]
     */
    Arr.array = function (length, value) {
        var tmpArr = [];
        var isUndefied = value === undefined;
        var isFunction = typeof value === 'function';
        var tmpVal = 0;
        for (var i = 0; i < length; i++) {
            if (isUndefied) {
                tmpArr.push(tmpVal);
                tmpVal++;
            }
            else if (isFunction) {
                tmpArr.push(value());
            }
            else {
                tmpArr.push(value);
            }
        }
        return tmpArr;
    };
    /**
     * [fn.toArray] 值数组化
     * @param src
     */
    Arr.toArray = function (src) {
        return src instanceof Array ? src : [src];
    };
    /**
     * [fn.sortByField] 对象数组根据字段排序
     * @param data
     * @param field
     * @param isDesc
     */
    Arr.sortByField = function (data, field, isDesc) {
        return data.sort(function (row1, row2) {
            return row1.hasOwnProperty(field) && row2.hasOwnProperty(field)
                ? row1[field] === row2[field]
                    ? 0
                    : isDesc
                        ? row1[field] > row2[field] ? -1 : 1
                        : row1[field] > row2[field] ? 1 : -1
                : 0;
        });
    };
    return Arr;
}());
exports.Arr = Arr;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Obj = /** @class */ (function () {
    function Obj() {
    }
    /**
     * [fn.length] 获取对象自有属性的个数
     * @arg obj [object]
     */
    Obj.len = function (obj) {
        if (obj && typeof obj === 'object' && !(obj instanceof Array)) {
            return Object.keys(obj).length;
        }
        else {
            return obj && obj[length] || undefined;
        }
    };
    /**
     * [fn.isEmpty] 判断对象是否为空对象或数组
     * @param obj
     */
    Obj.isEmpty = function (obj) {
        return obj && !Obj.len(obj) || false;
    };
    /**
     * [fn.overlay] 给对象赋值
     * @param target
     * @param source
     * @param propList
     */
    Obj.overlay = function (target, source, propList) {
        if (source) {
            if (propList && propList.length > 0) {
                propList.forEach(function (prop) {
                    if (source.hasOwnProperty(prop)) {
                        target[prop] = source[prop];
                    }
                });
            }
            else {
                Object.keys(source).forEach(function (key) {
                    target[key] = source[key];
                });
            }
        }
    };
    /**
     * [fn.deepCopy] 深拷贝对象或数组
     * @param data
     */
    Obj.deepCopy = function (data) {
        if (typeof data !== 'object') {
            return data;
        }
        var tmpData;
        if (data instanceof Array) {
            tmpData = [];
            for (var i = 0; i < data.length; i++) {
                tmpData.push(this.deepCopy(data[i]));
            }
        }
        else {
            tmpData = {};
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    tmpData[key] = this.deepCopy(data[key]);
                }
            }
        }
        return tmpData;
    };
    return Obj;
}());
exports.Obj = Obj;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Time = /** @class */ (function () {
    function Time() {
    }
    /**
     * [fn.interval] 循环定时器
     * @param timerId
     * @param duration
     * @param func
     */
    Time.interval = function (timerId, duration, func) {
        if (typeof duration === 'number' && typeof func === 'function') {
            clearInterval(Time.intervalTimers[timerId]);
            Time.intervalTimers[timerId] = setInterval(function () { return func(); }, duration);
        }
        else if (typeof duration === 'boolean' && !duration) {
            clearInterval(Time.intervalTimers[timerId]);
        }
    };
    /**
     * [fn.timeout] 延时定时器
     * @param timerId
     * @param duration
     * @param func
     */
    Time.timeout = function (timerId, duration, func) {
        if (typeof duration === 'number' && typeof func === 'function') {
            clearTimeout(Time.timeoutTimers[timerId]);
            Time.timeoutTimers[timerId] = setTimeout(function () { return func(); }, duration);
        }
        else if (typeof duration === 'boolean' && !duration) {
            clearTimeout(Time.timeoutTimers[timerId]);
        }
    };
    /**
     * [fn.timeStamp] 返回一个当前时间戳
     */
    Time.timeStamp = function (date) {
        if (date instanceof Date) {
            return date.getTime();
        }
        else {
            return (new Date(date)).getTime() || (new Date()).getTime();
        }
    };
    /**
     * [fn.fmtDate] 获取格式化的时间字符串
     * @param fmtStr
     * @param time
     */
    Time.fmtDate = function (fmtStr, time) {
        var _date = new Date(time);
        var date = _date.getTime() ? _date : new Date();
        var obj = {
            'M+': date.getMonth() + 1,
            'd+': date.getDate(),
            'h+': date.getHours(),
            'm+': date.getMinutes(),
            's+': date.getSeconds(),
            'q+': Math.floor((date.getMonth() + 3) / 3),
            'S': date.getMilliseconds()
        };
        if (/(y+)/.test(fmtStr)) {
            fmtStr = fmtStr.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
        }
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                if (new RegExp("(" + k + ")").test(fmtStr)) {
                    fmtStr = fmtStr.replace(RegExp.$1, (RegExp.$1.length == 1) ? (obj[k]) : (('00' + obj[k]).substr(('' + obj[k]).length)));
                }
            }
        }
        return fmtStr;
    };
    Time.intervalTimers = {};
    Time.timeoutTimers = {};
    return Time;
}());
exports.Time = Time;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Patterns = /** @class */ (function () {
    function Patterns() {
    }
    /* tslint:enable */
    /**
     * 与一个或几个通用正则匹配
     * @param type
     * @param isNoLimit
     * @returns {pattern|undefined}
     */
    Patterns.getPattern = function (type, isNoLimit) {
        if (isNoLimit === void 0) { isNoLimit = false; }
        if (!type) {
            return;
        }
        var patternsObj = {
            cnChar: Patterns.cnCharPattern,
            dblBitChar: Patterns.dblBitCharPattern,
            mobPhone: Patterns.mobPhonePattern,
            telPhone: Patterns.telPhonePattern,
            email: Patterns.emailPattern,
            base64Code: Patterns.base64CodePattern,
            mac: Patterns.macPattern,
            domain: Patterns.domainPattern,
            port: Patterns.portPattern,
            ip: Patterns.ipPattern,
            ipv4: Patterns.ipv4Pattern,
            ipv6: Patterns.ipv6Pattern,
            ipv4IpRange: Patterns.ipv4IpRangePattern,
            ipv6IpRange: Patterns.ipv6IpRangePattern,
            ipv4Cidr: Patterns.ipv4CidrPattern,
            ipv6Cidr: Patterns.ipv6CidrPattern,
            ipv4Url: Patterns.ipv4UrlPattern,
            ipv6Url: Patterns.ipv6UrlPattern,
            domainUrl: Patterns.domainUrlPattern,
            url: Patterns.urlPattern,
            ipv4WithPortUrl: Patterns.ipv4WithPortUrlPattern,
            ipv6WithPortUrl: Patterns.ipv6WithPortUrlPattern,
            domainWithPortUrl: Patterns.domainWithPortUrlPattern,
            withPortUrl: Patterns.withPortUrlPattern
        };
        patternsObj['patternList'] = Object.keys(patternsObj);
        return patternsObj.hasOwnProperty(type) && patternsObj[type]
            ? type === 'patternList'
                ? patternsObj[type]
                : isNoLimit
                    ? new RegExp(patternsObj[type].source)
                    : new RegExp("^(" + patternsObj[type].source + ")$")
            : undefined;
    };
    /**
     * 获取一个通用的正则表达式
     * @param src
     * @param type
     * @param isNoLimit
     * @returns {boolean}
     */
    Patterns.matchPattern = function (src, type, isNoLimit) {
        if (!src || !type) {
            return false;
        }
        if (type instanceof Array) {
            var matchResult_1 = false;
            type.forEach(function (item) {
                var pattern = Patterns.getPattern(item, isNoLimit);
                if (pattern && pattern.test(src)) {
                    matchResult_1 = true;
                }
            });
            return matchResult_1;
        }
        else if (typeof type === 'string') {
            var pattern = Patterns.getPattern(type, isNoLimit);
            return pattern && pattern.test(src);
        }
    };
    /* tslint:disable */
    // 匹配汉字
    Patterns.cnCharPattern = /[\u4e00-\u9fa5]+/;
    // 匹配双字节字符
    Patterns.dblBitCharPattern = /[^x00-xff]/;
    // 匹配手机号码，以13/14/15/18开头
    Patterns.mobPhonePattern = /1[3|4|5|8][0-9]\d{4,8}/;
    // 匹配大陆电话号码，格式为“XXXX-XXXXXXX”，“XXXX-XXXXXXXX”，“XXX-XXXXXXX”，“XXX-XXXXXXXX”，“XXXXXXX”，“XXXXXXXX”
    Patterns.telPhonePattern = /((d{3,4})|d{3,4}-)?d{7,8}/;
    // 匹配Email
    Patterns.emailPattern = /([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+/;
    // 匹配Base64编码格式
    Patterns.base64CodePattern = /([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?/;
    // 匹配Mac地址
    Patterns.macPattern = /[A-Fa-f\d]{2}:[A-Fa-f\d]{2}:[A-Fa-f\d]{2}:[A-Fa-f\d]{2}:[A-Fa-f\d]{2}:[A-Fa-f\d]{2}/;
    // 匹配域名
    Patterns.domainPattern = /([0-9a-z_!~*'()-]+\.)*([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\.[a-z]{2,6}/;
    // 匹配端口号
    Patterns.portPattern = /([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])/;
    // 匹配IPv4地址
    Patterns.ipv4Pattern = /((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)/;
    // 匹配IPv6地址
    Patterns.ipv6Pattern = new RegExp('' +
        '([\\da-fA-F]{1,4}:){6}((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)' +
        '|::([\\da-fA-F]{1,4}:){0,4}((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)' +
        '|([\\da-fA-F]{1,4}:):([\\da-fA-F]{1,4}:){0,3}((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)' +
        '|([\\da-fA-F]{1,4}:){2}:([\\da-fA-F]{1,4}:){0,2}((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)' +
        '|([\\da-fA-F]{1,4}:){3}:([\\da-fA-F]{1,4}:){0,1}((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)' +
        '|([\\da-fA-F]{1,4}:){4}:((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)' +
        '|([\\da-fA-F]{1,4}:){7}[\\da-fA-F]{1,4}' +
        '|:((:[\\da-fA-F]{1,4}){1,6}|:)' +
        '|[\\da-fA-F]{1,4}:((:[\\da-fA-F]{1,4}){1,5}|:)' +
        '|([\\da-fA-F]{1,4}:){2}((:[\\da-fA-F]{1,4}){1,4}|:)' +
        '|([\\da-fA-F]{1,4}:){3}((:[\\da-fA-F]{1,4}){1,3}|:)' +
        '|([\\da-fA-F]{1,4}:){4}((:[\\da-fA-F]{1,4}){1,2}|:)' +
        '|([\\da-fA-F]{1,4}:){5}:([\\da-fA-F]{1,4})?' +
        '|([\\da-fA-F]{1,4}:){6}:');
    // 匹配IP
    Patterns.ipPattern = new RegExp("(" + Patterns.ipv4Pattern.source + "|" + Patterns.ipv6Pattern.source + ")");
    // 匹配IPv4 cidr
    Patterns.ipv4CidrPattern = /((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)(\/([1-9]|1[0-9]|2[0-9]|3[0-2]))/;
    // 匹配IPV6 cidr
    Patterns.ipv6CidrPattern = new RegExp('s*(' +
        '(([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))' +
        '|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))' +
        '|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))' +
        '|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))' +
        '|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))' +
        '|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))' +
        '|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))' +
        '|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))' +
        ')(\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))');
    // 匹配IPv4范围
    Patterns.ipv4IpRangePattern = new RegExp("((" + Patterns.ipv4Pattern.source + ")-(" + Patterns.ipv4Pattern.source + ");)*(" + Patterns.ipv4Pattern.source + ")-(" + Patterns.ipv4Pattern.source + ")");
    // 匹配IPv6范围
    Patterns.ipv6IpRangePattern = new RegExp("((" + Patterns.ipv6Pattern.source + ")-(" + Patterns.ipv6Pattern.source + ");)*(" + Patterns.ipv6Pattern.source + ")-(" + Patterns.ipv6Pattern.source + ")");
    // 匹配IPv4 Url
    Patterns.ipv4UrlPattern = new RegExp("http(s)?://" + Patterns.ipv4Pattern.source + "(:" + Patterns.portPattern.source + ")?");
    // 匹配IPv6 Url
    Patterns.ipv6UrlPattern = new RegExp("http(s)?://\\[(" + Patterns.ipv6Pattern.source + ")\\](:" + Patterns.portPattern.source + ")?");
    // 匹配Domain Url
    Patterns.domainUrlPattern = new RegExp("http(s)?://" + Patterns.domainPattern.source + "(:" + Patterns.portPattern.source + ")?");
    // 匹配Url
    Patterns.urlPattern = new RegExp("http(s)?://(" + Patterns.ipv4Pattern.source + "|\\[(" + Patterns.ipv6Pattern.source + ")\\]|" + Patterns.domainPattern.source + ")(:" + Patterns.portPattern.source + ")?");
    // 匹配必需带端口的IPv4 Url
    Patterns.ipv4WithPortUrlPattern = new RegExp("http(s)?://" + Patterns.ipv4Pattern.source + ":" + Patterns.portPattern.source);
    // 匹配必需带端口的IPv6 Url
    Patterns.ipv6WithPortUrlPattern = new RegExp("http(s)?://\\[(" + Patterns.ipv6Pattern.source + ")\\]:" + Patterns.portPattern.source);
    // 匹配必需带端口的Domain Url
    Patterns.domainWithPortUrlPattern = new RegExp("http(s)?://" + Patterns.domainPattern.source + ":" + Patterns.portPattern.source);
    // 匹配必需带端口的Url
    Patterns.withPortUrlPattern = new RegExp("http(s)?://(" + Patterns.ipv4Pattern.source + "|\\[(" + Patterns.ipv6Pattern.source + ")\\]|" + Patterns.domainPattern.source + "):" + Patterns.portPattern.source);
    return Patterns;
}());
exports.Patterns = Patterns;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var keyMap_1 = __webpack_require__(7);
var Events = /** @class */ (function () {
    function Events() {
    }
    /**
     * [fn.getKeyCodeByName] 根据键名获取键码
     * @param keyName
     */
    Events.getKeyCodeByName = function (keyName) {
        for (var keyCode in keyMap_1.KEY_MAP) {
            if (keyMap_1.KEY_MAP[keyCode] === keyName) {
                return Number(keyCode);
            }
        }
        return NaN;
    };
    /**
     * [fn.getKeyCodeByName] 根据键码获取键名
     * @param keyName
     */
    Events.getKeyNameByCode = function (keyCode) {
        return keyMap_1.KEY_MAP[keyCode] || '';
    };
    return Events;
}());
exports.Events = Events;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KEY_MAP = {
    8: 'Backspace',
    9: 'Tab',
    13: 'Enter',
    16: 'Shift',
    17: 'Ctrl',
    18: 'Alt',
    19: 'Pause',
    20: 'Caps Lock',
    27: 'Escape',
    32: 'Space',
    33: 'Page Up',
    34: 'Page Down',
    35: 'End',
    36: 'Home',
    37: 'Left',
    38: 'Up',
    39: 'Right',
    40: 'Down',
    42: 'Print Screen',
    45: 'Insert',
    46: 'Delete',
    48: '0',
    49: '1',
    50: '2',
    51: '3',
    52: '4',
    53: '5',
    54: '6',
    55: '7',
    56: '8',
    57: '9',
    65: 'A',
    66: 'B',
    67: 'C',
    68: 'D',
    69: 'E',
    70: 'F',
    71: 'G',
    72: 'H',
    73: 'I',
    74: 'J',
    75: 'K',
    76: 'L',
    77: 'M',
    78: 'N',
    79: 'O',
    80: 'P',
    81: 'Q',
    82: 'R',
    83: 'S',
    84: 'T',
    85: 'U',
    86: 'V',
    87: 'W',
    88: 'X',
    89: 'Y',
    90: 'Z',
    91: 'Windows',
    93: 'Right Click',
    96: 'Numpad 0',
    97: 'Numpad 1',
    98: 'Numpad 2',
    99: 'Numpad 3',
    100: 'Numpad 4',
    101: 'Numpad 5',
    102: 'Numpad 6',
    103: 'Numpad 7',
    104: 'Numpad 8',
    105: 'Numpad 9',
    106: 'Numpad *',
    107: 'Numpad +',
    109: 'Numpad -',
    110: 'Numpad .',
    111: 'Numpad /',
    112: 'F1',
    113: 'F2',
    114: 'F3',
    115: 'F4',
    116: 'F5',
    117: 'F6',
    118: 'F7',
    119: 'F8',
    120: 'F9',
    121: 'F10',
    122: 'F11',
    123: 'F12',
    144: 'Num Lock',
    145: 'Scroll Lock',
    182: 'My Computer',
    183: 'My Calculator',
    186: ';',
    187: '=',
    188: ',',
    189: '-',
    190: '.',
    191: '/',
    192: '`',
    219: '[',
    220: '\\',
    221: ']',
    222: '\''
};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Mathematic = /** @class */ (function () {
    function Mathematic() {
    }
    /**
     * [fn.randomId] 返回一个指定长度（最小4位）的随机ID
     * @param len
     */
    Mathematic.randomId = function (len) {
        var _this = this;
        var charSet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        var eleId = '';
        if (len < 4) {
            len = 4;
        }
        ;
        this.array(len).forEach(function (x) { return eleId += charSet[_this.randomNum(charSet.length)]; });
        return eleId;
    };
    /**
     * 返回一个指定范围内的随机数
     * @param sta
     * @param end
     */
    Mathematic.randomNum = function (sta, end) {
        if (end === undefined || sta === end) {
            return Math.floor(Math.random() * sta);
        }
        else {
            if (sta > end) {
                var tmpSta = sta;
                sta = end;
                end = tmpSta;
            }
            return Math.floor(Math.random() * (end - sta) + sta);
        }
    };
    /**
     * 返回一个随机颜色色值
     */
    Mathematic.randomColor = function () {
        return '#' + ('00000' + (this.randomNum(0x1000000) << 0).toString(16)).slice(-6);
    };
    return Mathematic;
}());
exports.Mathematic = Mathematic;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 控制台格式化打印值
 * @param value
 * @param configs {
 * title: string,
 * lineLen: number [20-100]
 * part: 'pre'|'end' [S]
 * color: 'grey'|'blue'|'cyan'|'green'|'magenta'|'red'|'yellow' [S]
 */
function loger(value, configs, isClient) {
    if (value === undefined) {
        value = "Welecome come to use funclib: " + this.version + " !";
    }
    if (typeof value === 'object') {
        value = JSON.stringify(value, null, 2);
    }
    else {
        value = String(value);
    }
    var title = configs && configs['title'] || "funclib " + this.version;
    var lineLen = configs && configs['lineLen'];
    if (!lineLen || lineLen < 20 || lineLen > 100) {
        lineLen = 66;
    }
    var titlelen, sp = '';
    if (title.length <= lineLen - 10) {
        titlelen = title.length;
    }
    else {
        titlelen = lineLen - 10;
        title = this.cutString(title, titlelen - 2);
    }
    this.array((lineLen - titlelen) / 2, ' ').forEach(function (x) { return sp += x; });
    var tt = sp + title;
    var s = '-', d = '=';
    var sL = '', dL = '';
    this.array(lineLen).forEach(function (x) {
        sL += s;
        dL += d;
    });
    if (isClient) {
        console.log("\n" + dL + "\n" + tt + "\n" + sL + "\n" + value + "\n" + dL + "\n");
    }
    else {
        var colors = {
            'grey': '\x1B[90m%s\x1B[0m',
            'blue': '\x1B[34m%s\x1B[0m',
            'cyan': '\x1B[36m%s\x1B[0m',
            'green': '\x1B[32m%s\x1B[0m',
            'magenta': '\x1B[35m%s\x1B[0m',
            'red': '\x1B[31m%s\x1B[0m',
            'yellow': '\x1B[33m%s\x1B[0m'
        };
        var color = configs && configs['color'] in colors && configs['color'] || 'grey';
        if (configs && ['pre', 'end'].indexOf(configs['part']) > -1) {
            if (configs['part'] === 'pre') {
                console.log('\n' + dL);
                console.log(colors['green'], tt);
                console.log(sL);
            }
            else {
                console.log(dL + '\n');
            }
        }
        else {
            console.log('\n' + dL);
            console.log(colors['green'], tt);
            console.log(sL);
            console.log(colors[color], value);
            console.log(dL + '\n');
        }
    }
}
exports.loger = loger;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Dom = /** @class */ (function () {
    function Dom() {
    }
    /**
     * [fn.fullScreen] 全屏显示HTML元素
     * @param el
     * @returns {any}
     */
    Dom.fullScreen = function (el) {
        var rfs = el['requestFullScreen'] || el['webkitRequestFullScreen']
            || el['mozRequestFullScreen'] || el['msRequestFullScreen'];
        if (rfs) {
            return rfs.call(el);
        }
        if (window['ActiveXObject']) {
            var ws = new window['ActiveXObject']("WScript.Shell");
            if (ws) {
                ws.SendKeys("{F11}");
            }
        }
    };
    /**
     * [fn.exitFullScreen] 退出全屏显示
     * @returns {any}
     */
    Dom.exitFullScreen = function () {
        var cfs = document['cancelFullScreen'] || document['webkitCancelFullScreen']
            || document['mozCancelFullScreen'] || document['exitFullScreen'];
        if (cfs) {
            return cfs.call(document);
        }
        if (window['ActiveXObject']) {
            var ws = new window['ActiveXObject']("WScript.Shell");
            if (ws != null) {
                ws.SendKeys("{F11}");
            }
        }
    };
    /**
     * [fn.checkIsFullScreen] 检测是否全屏状态
     * @returns {boolean}
     */
    Dom.checkIsFullScreen = function () {
        return !!document['fullscreenEnabled'] || document['fullScreen']
            || document['webkitIsFullScreen'] || document['msFullscreenEnabled'];
    };
    return Dom;
}());
exports.Dom = Dom;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Cookie = /** @class */ (function () {
    function Cookie() {
    }
    /**
     * [fn.setCookie] 设置Cookie
     * @param name
     * @param value
     * @param days
     */
    Cookie.setCookie = function (name, value, days) {
        var date = new Date();
        date.setDate(date.getDate() + days);
        document.cookie = name + "=" + value + ";expires=" + date;
    };
    /**
     * [fn.getCookie] 根据name读取cookie
     * @param  name
     * @return {String}
     */
    Cookie.getCookie = function (name) {
        var cks = document.cookie.replace(/\s/g, "").split(';');
        for (var i = 0; i < cks.length; i++) {
            var tempArr = cks[i].split('=');
            if (tempArr[0] == name) {
                return decodeURIComponent(tempArr[1]);
            }
        }
        return '';
    };
    /**
     * [fn.removeCookie] 根据name删除cookie
     * @param name
     */
    Cookie.removeCookie = function (name) {
        Cookie.setCookie(name, '1', -1);
    };
    return Cookie;
}());
exports.Cookie = Cookie;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Tools = /** @class */ (function () {
    function Tools(fs, path, child_process, process) {
        this.fs = fs;
        this.path = path;
        this.child_process = child_process;
        this.process = process;
    }
    /**
     * [fn.cpSync] 复制文件或文件夹
     * @param src
     * @param dist
     */
    Tools.prototype.cpSync = function (src, dist) {
        var _this = this;
        if (this.fs.existsSync(src)) {
            if (this.fs.statSync(src).isFile()) {
                this.fs.createReadStream(src).pipe(this.fs.createWriteStream(dist));
            }
            else if (this.fs.statSync(src).isDirectory()) {
                this.mkdirSync(dist);
                var subSrcs = this.fs.readdirSync(src);
                subSrcs.forEach(function (file) {
                    var subSrc = _this.path.join(src, file);
                    var subDist = _this.path.join(dist, file);
                    _this.cpSync(subSrc, subDist);
                });
            }
        }
    };
    /**
     * [fn.mvSync] 移动文件或文件夹
     * @param src
     * @param dist
     */
    Tools.prototype.mvSync = function (src, dist) {
        try {
            this.fs.renameSync(src, dist);
        }
        catch (e) {
            this.cpSync(src, dist);
            this.rmSync(src);
        }
    };
    /**
     * [fn.rmSync] 删除文件或文件夹
     * @param src
     */
    Tools.prototype.rmSync = function (src) {
        var _this = this;
        if (this.fs.existsSync(src)) {
            if (this.fs.statSync(src).isFile()) {
                this.fs.unlinkSync(src);
            }
            else if (this.fs.statSync(src).isDirectory()) {
                var subSrcs = this.fs.readdirSync(src);
                subSrcs.forEach(function (file) {
                    var subSrc = _this.path.join(src, file);
                    _this.rmSync(subSrc);
                });
                try {
                    this.fs.rmdirSync(src);
                }
                catch (e) {
                    setTimeout(function () {
                        if (/win/.test(_this.process.platform)) {
                            var absSrc = _this.path.resolve(src);
                            _this.child_process.execSync("rd /s /q " + absSrc);
                        }
                        else {
                            _this.child_process.execSync("rm -rf " + src);
                        }
                    }, 500);
                }
            }
        }
    };
    /**
     * [fn.mkdirSync] 创建文件夹
     * @param dist
     */
    Tools.prototype.mkdirSync = function (dist) {
        var absDist = this.path.resolve(dist);
        if (!this.fs.existsSync(absDist)) {
            try {
                this.fs.mkdirSync(absDist);
            }
            catch (e) {
                this.mkdirSync(this.path.dirname(absDist));
                this.fs.mkdirSync(absDist);
            }
        }
        ;
    };
    return Tools;
}());
exports.Tools = Tools;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Progress = /** @class */ (function () {
    function Progress(progress) {
        this.PgBar = progress;
    }
    /**
     * [fn.progress.start] 开启进度条，并传入参数
     * @param options {title: string, width: number (base: 40)}
     */
    Progress.prototype.start = function (options) {
        var prog = (options && options.title || '[fn.progress]') + " [:bar] :percent";
        this.this = new this.PgBar(prog, {
            complete: '=', incomplete: ' ',
            width: options && options['width'] || 40,
            total: options && options['total'] || 20
        });
        clearTimeout(this.timer);
        this.duration = 250;
        this.tickFun('+');
    };
    /**
     * [fn.progress.stop] 结束进度条，结束后触发回调
     * @param onStopped
     */
    Progress.prototype.stop = function (onStopped) {
        clearTimeout(this.timer);
        this.duration = 600;
        this.tickFun('-', onStopped);
    };
    Progress.prototype.tickFun = function (type, onStopped) {
        var _this = this;
        this.timer = setTimeout(function () {
            _this.this.tick();
            switch (type) {
                case '+':
                    _this.duration += 320;
                    break;
                case '-':
                    _this.duration -= _this.duration * 0.2;
                    break;
            }
            if (_this.this.complete) {
                if (typeof onStopped === 'function') {
                    onStopped();
                }
            }
            else {
                _this.tickFun(type, onStopped);
            }
        }, this.duration);
    };
    return Progress;
}());
exports.Progress = Progress;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function extendJquery($, interval) {
    var intervalTimers = {};
    var timeoutTimers = {};
    $.extend({
        /**
         * [$.pollingElement] 轮询获取异步出现的jQuery元素
         * @param timerId
         * @param selector
         * @param interval
         * @param func [opt.]
         */
        pollingElement: function (timerId, selector, interval, func) {
            var _this = this;
            if ((typeof selector === 'string' || selector instanceof Array) && typeof func === 'function') {
                var count_1 = 0;
                var duration_1 = 250;
                this.interval(timerId, duration_1, function (eles) {
                    parseInt(String(interval / duration_1), 10) <= count_1 ? _this.interval(timerId, false) : count_1++;
                    var tmpArr = [];
                    var slts = typeof selector === 'string' ? [selector] : selector;
                    slts.forEach(function (slt) {
                        var $ele = $(slt);
                        if ($ele.length > 0) {
                            tmpArr.push($ele);
                        }
                    });
                    if (tmpArr.length === slts.length) {
                        _this.interval(timerId, false);
                        func(tmpArr);
                    }
                });
            }
            else {
                this.interval(timerId, false);
            }
        },
        /**
         * [$.noAutoComplete] 防止input密码自动填充
         * @param options [{type: 'username'|'password', $input: $(input)} | [{}]]
         */
        noAutoComplete: function (options) {
            var noAutoCplt = function (opt) {
                if (opt['type'] && opt['$input']) {
                    if (['user', 'username'].indexOf(opt.type) > -1) {
                        opt.$input
                            .attr('autocomplete', 'off')
                            .before('<input type="password" style="display: none"/>');
                    }
                    else if (['pwd', 'pass', 'password'].indexOf(opt.type) > -1) {
                        opt.$input
                            .attr({ autocomplete: 'new-password', type: 'text' })
                            .on('input propertychange', function () {
                            $(this).val() ? $(this).attr('type', 'password') : $(this).attr('type', 'text');
                        });
                    }
                }
            };
            options instanceof Array
                ? options.forEach(function (opt) { return noAutoCplt(opt); })
                : noAutoCplt(options);
        },
        /**
          * [$.copyText] 复制文本到粘贴板
          * @param text [string]
          */
        copyText: function (text) {
            var $tmpIpt = $('<textarea></textarea>').css({ position: 'fixed', left: '200%' });
            $('body').append($tmpIpt);
            $tmpIpt.val(text).select();
            document.execCommand('Copy');
            $tmpIpt.remove();
        }
    });
    /**
     * [$ele.findCousin] 寻找元素的表亲
     * @param selector [string]
     * @param level    [number]
     */
    $.fn.findCousin = function (selector, level) {
        if (level === void 0) { level = 0; }
        if (!level) {
            return selector ? this.parents().find(selector) : this.parents();
        }
        else {
            var $parent = this;
            for (var i = 0; i < level; i++) {
                $parent = $parent.parent();
            }
            return selector ? $parent.find(selector) : $parent;
        }
    };
}
exports.extendJquery = extendJquery;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FunclibConf = {
    clientMethods: [
        'setCookie',
        'getCookie',
        'removeCookie',
        'fullScreen',
        'exitFullScreen',
        'checkIsFullScreen',
    ],
    serverMethods: [
        'initProgress',
        'initTools'
    ],
    isClient: true
};


/***/ })
/******/ ]);
});